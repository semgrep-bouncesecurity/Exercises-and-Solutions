rules:
  - id: sol22_dbg_sqli
    mode: taint
    pattern-sources:
      - pattern: string $VAR = ...;
      - patterns:
          - pattern: public void $FUNC(..., $VAR, ...) {...}
          - focus-metavariable:
              - $VAR
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: ... .$PATTERN = $FORMAT(...)
              - pattern: new $PATTERN($FORMAT(...))
          - metavariable-regex:
              metavariable: $FORMAT
              regex: ^(string\.Format|String\.Format|string\.Concat|String\.Concat)$
          - metavariable-regex:
              metavariable: $PATTERN
              regex: ^(SqlCommand|CommandText|OleDbCommand|OdbcCommand|OracleCommand)$
    pattern-sanitizers:
      - pattern-either:
          - pattern: ... .Replace("'", "''")
          - pattern: Utility.SQLSanitize(...)
    message: Detected a formatted string in a SQL statement. This could lead to SQL
      injection if variables in the SQL statement are not properly sanitized.
      Use a prepared statements instead. You can obtain a PreparedStatement
      using 'SqlCommand' and 'SqlParameter'.
    metadata:
      category: security
      technology:
        - csharp
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A03_2021-Injection
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - audit
      likelihood: LOW
      impact: HIGH
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - SQL Injection
    languages:
      - csharp
    severity: ERROR
